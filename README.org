#+TITLE: Mini-CI
#+OPTIONS: toc:4 H:4 p:t
#+AUTHOR: Andrew Phillips
#+EMAIL: theasp@gmail.com

* Introduction
Mini-CI is a small daemon to perform continuous integration (CI) for a single repository/project.  Most other CI software is complicated to setup and use due to feature bloat and hiding what is going on underneath with GUIs.  If you know how to build your project from the command line, setting up Mini-CI should be easy.
* Features
- NO web interface!
  - Configuration is done with a small config file and shell scripts.
  - Daemon controlled through a command.
- NO user authentication!
  - Unix already has multiple users, use groups or make a shared account.
- NO support for multiple projects!
  - You can run it more than once...
- Plugin system
- Low resource requirements.
  - Just a small bash script.
- Can monitor any repository and use any build system.
  - The only limits are the scripts you provide.
* Installation
** Ubuntu PPA
- Stable release: https://launchpad.net/~theasp/+archive/ubuntu/mini-ci
- Snapshot release: https://launchpad.net/~theasp/+archive/ubuntu/mini-ci-snapshot
** From Source
To install into =/usr/local=:
#+BEGIN_SRC sh
make clean install
#+END_SRC

To install into your home directory (=~/opt/mini-ci=):
#+BEGIN_SRC sh
make clean install prefix=~/opt/mini-ci
#+END_SRC
* Usage
From the output of =mini-ci --help=:
#+BEGIN_SRC sh :exports results :results drawer :eval no-export
echo "#+BEGIN_EXAMPLE"
./mini-ci --help
echo "#+END_EXAMPLE"
#+END_SRC

#+RESULTS:
:RESULTS:
#+BEGIN_EXAMPLE
Usage: mini-ci [option ...] [command ...]

Options:
  -d|--job-dir <dir>       directory for job
  -c|--config-file <file>  config file to use, relative to job-dir
  -m|--message [timeout]   send commands to running daemon, then exit
  -o|--oknodo              exit quietly if already running
  -D|--debug               log debugging information
  -F|--foreground          do not become a daemon, run in foreground
  -h|--help                show usage information and exit

Commands:
  status  log the current status
  poll    poll the source code repository for updates, queue update if
          updates are available
  update  update the source code repository, queue tasks if updates are made
  tasks   run the tasks in the tasks directory
  clean   remove the work directory
  abort   abort the currently running command
  quit|shutdown
          shutdown the daemon, aborting any running command
  reload  reread the config file, aborting any running command

Commands given while not in message mode will be queued.  For instance
the following command will have a repository polled for updates (which
will trigger update and tasks if required) then quit.
  mini-ci -d <dir> -F poll quit
#+END_EXAMPLE
:END:
* Configuration
You can configure a Mini-CI job by copying the =skeleton= directory somewhere and then editing where required.  This directory is referred to has the "job directory".  The skeleton contains the file =config= and the directory =tasks.d=, see their description later.  Once you have the configuration in place you can try it by running =mini-ci -F= in the directory you created, which will run Mini-CI in the foreground.

* Contents of a Job Directory
- =config=: The configuration file for the job.
- =tasks.d=: Contains all the tasks that would be executed during a build of your repository
- =builds=: The builds directory contains the output of each build of a job in numbered directories.
- =workspace=: The directory your repository is checked out into, and built in.
- =mini-ci.log=: The main log for Mini-CI.
- =poll.log=: The log for the last poll operation.
- =tasks.log=: The log for the last tasks operation.
- =update.log=: The log for the last update operation.
- =control.fifo=: This is a FIFO used to communicate with the Mini-CI daemon.

** =config=
The =config= file is a shell script that is sourced when Mini-CI is started which contains the configuration to use for your job.  Every option should have sane defaults, so feel free to only have the entries you wish to use.  If you want a variable exported during your job, for instance =PATH=, this would also be a good place to do so.

The =config= file in =skeleton= is:
#+BEGIN_SRC sh :exports results :results drawer :eval no-export
echo "#+BEGIN_SRC sh"
cat skeleton/config
echo "#+END_SRC"
#+END_SRC

#+RESULTS:
:RESULTS:
#+BEGIN_SRC sh
# All paths are relative to the job directory.

####################
# Main Configuration

# JOB_NAME: The name of the job.  Defaults to "$(basename $JOB_DIR)"
JOB_NAME="$(basename $JOB_DIR)"

# REPO_PLUGIN: This is the name of a plugin that will handle
# repository actions.  The following plugins come with Mini-CI:
# - git
# - svn
# - external
REPO_PLUGIN="<plugin>"

# POLL_FREQ: If this is set to a number greater than zero, it will poll the
# repository using the repo-handler every this many seconds, starting
# at startup.  To have a more complicated scheme, use cron.
POLL_FREQ=600

# BUILD_KEEP: If this is set to a number greater than zero, only this
# many build log directories will be kept.  Defaults to "0".
BUILD_KEEP=0

# WORKSPACE: The directory where the repository will be checked out
# into, and where tasks are launched.  Defaults to "./workspace".
WORKSPACE="./workspace"

# BUILD_ARCHIVE_WORKSPACE: When set to "yes" will copy the workspace into
# the $BUILDS_DIR/$BUILD_NUM/workspace.  Defaults to "".
BUILD_ARCHIVE_WORKSPACE=""

# TASKS_DIR: The directory which holds the tasks to be performed on
# the checked out repository.  Defaults to "./tasks.d"
TASKS_DIR="./tasks.d"

# BUILDS_DIR: The directory which stores the output of each build when
# tasks run.  Defaults to "./builds".
BUILDS_DIR="./builds"

# CONTROL_FIFO: The fifo that mini-ci will read to accept commands.
# Defaults to "./control.fifo".
CONTROL_FIFO="./control.fifo"

# PID_FILE: The file containing the process ID for mini-ci.  Defaults
# to "./minici.pid".
PID_FILE="./mini-ci.pid"

# STATUS_FILE: A file where status information is kept.  Defaults to
# "./status".
STATUS_FILE="./status"

# POLL_LOG: Name of the poll log.  Defaults to "./poll.log".
POLL_LOG="./poll.log"

# UPDATE_LOG: Name of the update log.  Defaults to "./update.log".
UPDATE_LOG="./update.log"

# TASKS_LOG: Name of the tasks log.  Defaults to "./tasks.log".
TASKS_LOG="./tasks.log"

# MINICI_LOG: Name of the mini-ci log.  Defaults to "./mini-ci.log".
MINICI_LOG="./mini-ci.log"

####################
# Plugin Configuration

# GIT_URL: The URL to the repository.  Fetching the URL must not ask
# for a username or password.  Use ~/.netrc or ssh keys for remote
# repositories.
#GIT_URL="<url>"

# SVN_URL: The URL to the repository.  Fetching the URL must not ask
# for a username or password.  Use ~/.netrc or ssh keys for remote
# repositories.
#SVN_URL="<url>"

# EMAIL_NOTIFY: A space and/or comma separated list of conditions to
# notify about.  Valid options are "NEVER", "ERROR", "OK", "UNKNOWN",
# "RECOVER" (when a state changes from "ERROR" or "UNKNOWN" to "OK")
# and "NEWPROB" (when a state changes from "OK" to "ERROR" or
# "UNKNOWN").  Defaults to "NEWPROB, RECOVER".
EMAIL_NOTIFY="NEWPROB, RECOVER"

# EMAIL_ADDRESS: A space and/or comma separated list of addresses to
# email.  If not specified, will be sent to the user that is running
# the script.  Defaults to "".
EMAIL_ADDRESS=""

# EMAIL_SUBJECT: The subject to have for notification emails.
# Defaults to "Mini-CI Notification - $JOB_NAME".
EMAIL_SUBJECT="Mini-CI Notification - $JOB_NAME"
#+END_SRC
:END:
** =tasks.d=
The =tasks.d= directory contains all the tasks that would be executed during a build of your repository.  The =skeleton= contains a few examples.  Each script must match the regular expression =^[a-zA-Z0-9_-]+$= and will be ran in sort order, therefore it is recommended that each script be named in the form =<nnn>-<description_of_task>=.  If a script exits with a return code that is not zero, it is considered a build error and no further scripts are executed.
* Examples
** Mini-CI Job Directory
This example will configure to monitor Mini-CI's GIT repository and run tests whenever it's updated.

Create and enter a directory called =mini-ci-job=, then place the following in =config=:
#+BEGIN_SRC sh
REPO_PLGUIN="git"
GIT_URL="https://github.com/theasp/mini-ci"
POLL_FREQ=600
#+END_SRC

This configuration will use the GIT repository handler with the URL to the Mini-CI repository, and then poll it every 10 minutes.

Create the directory =tasks.d=, then place the following file in =tasks.d/100-make=
#+BEGIN_SRC sh
#!/bin/sh

set -ex

# Override the prefix to install into ~/opt/mini-ci
make prefix=~/opt/mini-ci
#+END_SRC

Place the following file in =tasks.d/500-run_tests=:
#+BEGIN_SRC sh
#!/bin/sh
make test
#+END_SRC

Run =chmod +x tasks.d/500-run_tests= to make the script executable.  Now when you run =mini-ci -F= in the job directory you will get:

#+BEGIN_EXAMPLE
2014-12-18 17:20:03 mini-ci/7145 Starting up
2014-12-18 17:20:05 mini-ci/7369 Missing workdir, doing update instead
2014-12-18 17:20:05 mini-ci/7145 Updating workspace
2014-12-18 17:20:06 mini-ci/7145 Update finished sucessfully, queuing tasks
2014-12-18 17:20:06 mini-ci/7145 Mailing update notification to user due to RECOVER (New:OK Old:UNKNOWN)
2014-12-18 17:20:06 mini-ci/7145 Mailing poll notification to user due to RECOVER (New:OK Old:UNKNOWN)
2014-12-18 17:20:07 mini-ci/7145 Starting tasks as run number 1
2014-12-18 17:20:07 mini-ci/7145 Tasks finished sucessfully, run number 1
2014-12-18 17:20:07 mini-ci/7145 Mailing tasks notification to user due to RECOVER (New:OK Old:UNKNOWN)
#+END_EXAMPLE

Mini-CI started in foreground mode, downloaded the repository, then ran all the tasks in the =tasks.d= directory.  Notice that it also sent 3 mail notifications due to update, poll and tasks transitioning from =UNKNOWN= to =RECOVER=.  The default email settings will only send mail when they change state.  The process is still running and will check the repository for changes every 10 minutes.

You can stop the daemon by pressing =ctrl-c=, or by running =mini-ci -m quit= in the job directory in another shell.

** Starting the Mini-CI Daemon as a User
The easiest way to run Mini-CI as a user is to have =cron= start it.  For instance, the following crontab will start Mini-CI every 10 minutes, and if it is already running for that job directory it will exit quietly:
#+BEGIN_EXAMPLE
*/10 * * * * mini-ci --oknodo -d ~/some-mini-ci-job-directory
#+END_EXAMPLE

Mini-CI will run in the background doing it's thing whenever it needs to.

** Notifying a Mini-CI Daemon from GIT
You can have git notify Mini-CI upon every push to a repository, which makes polling the repository unnecessary.  Put this in =hooks/post-update= in your git repository directory (or =.git/hooks/post-update= if you aren't using a bare repository), and it will send a message to Mini-CI to do an update.
#+BEGIN_SRC sh
#!/bin/sh

set -e
mini-ci -d ~/some-mini-ci-job-directory -m update
#+END_SRC

You can easily change the above script to SSH to another system, or user.
# Local variables:
# org-ascii-charset: utf-8
# eval: (add-hook 'after-save-hook '(lambda () (org-ascii-export-to-ascii) (org-html-export-to-html) ) nil t)
# end:
